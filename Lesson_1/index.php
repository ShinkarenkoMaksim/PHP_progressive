<?php
class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
$a1 = new A();
$a2 = new A();
$a1->foo();
$a2->foo();
$a1->foo();
$a2->foo();

//При каждом вызове функции foo() любого экземпляра класса A статичное поле $x класса А меняет свое значение в соответствии с инкрементом, а после выводится на экран


echo '<br>';
class C {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
class B extends C {
}
$c1 = new C();
$b1 = new B();
$c1->foo();
$b1->foo();
$c1->foo();
$b1->foo();

//Классы А и В - разные классы, хоть В и является потомком класса А, а поэтому они имеют каждый свое статичное поле $x, что мы и видим при вызове функций foo() объектов этих классов
echo '<br>';

class D {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
class E extends D {
}
$a1 = new D;
$b1 = new E;
$a1->foo();
$b1->foo();
$a1->foo();
$b1->foo();

//Классы А и В - разные классы, хоть В и является потомком класса А, а поэтому они имеют каждый свое татичное поле $x, что мы и видим при вызове функций foo() объектов этих классов. Разница с предыдущим примером в синтаксисе - опущены скобки при создании новых объектов, это ни на что не влияет в этом конкретном случае, т.к. данные классы не принимают никаких входящих аргументов.